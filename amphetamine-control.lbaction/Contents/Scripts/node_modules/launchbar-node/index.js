'use strict';
const execa = require('execa')
const runApplescript = require('run-applescript');
const clipboardy = require('clipboardy')
const escapeString = require('escape-string-applescript')
const CacheConf = require('cache-conf')

const LaunchBar = module.exports;

// environment variables considered for inclusion:
// LB_DEBUG_LOG_ENABLED
// LB_SCRIPT_TYPE
// LB_OPTION_RUN_IN_BACKGROUND
// LB_OPTION_LIVE_FEEDBACK

/**
 * the absolute path the LaunchBar.app package.
 */
LaunchBar.path = process.env['LB_LAUNCHBAR_PATH']


LaunchBar.options = {
	commandKey: (process.env['LB_OPTION_COMMAND_KEY'] === '1') ? true : false,
	alternateKey: (process.env['LB_OPTION_ALTERNATE_KEY'] === '1') ? true : false,
	shiftKey: (process.env['LB_OPTION_SHIFT_KEY'] === '1') ? true : false,
	controlKey: (process.env['LB_OPTION_CONTROL_KEY'] === '1') ? true : false,
	spaceKey: (process.env['LB_OPTION_SPACE_KEY'] === '1') ? true : false,
}

/**
 * @property {string} LaunchBar.action.path - the absolute path the current action's .lbaction package
 * @property {string} LaunchBar.action.supportPath - the absolute path the current action's support folder (~/Library/Application Support/LaunchBar/Action Support/)
 * @property {string} LaunchBar.action.cachePath - the absolute path the current action's cache folder (in ~/Library/Caches/at.obdev.LaunchBar/Actions/)
 */
LaunchBar.action = {
	path: process.env['LB_ACTION_PATH'],
	supportPath: process.env['LB_SUPPORT_PATH'],
	cachePath: process.env['LB_CACHE_PATH']
}


/**
* hides LaunchBar.
*/
LaunchBar.hide = async () => {
	await runApplescript('tell application "LaunchBar" to hide');
};


/**
* keeps LaunchBar active.
*/
LaunchBar.remainActive = async () => {
	await runApplescript('tell application "LaunchBar" to remain active');
};


/**
* Asynchronously sets the clipboard's contents.
* @param {String} text the text to copy to the clipboard.
*/
LaunchBar.setClipboardString = async text => {
	try {
		await clipboardy.write(text)
	} catch (error) {
		return error
	}
}


/**
* Asynchronously pastes passed text into the frontmost application.
* @param {String} text the text to paste.
*/
LaunchBar.paste = async text => {
	try {
		await runApplescript(`tell application "LaunchBar" to paste in frontmost application "${escapeString(text)}"`)
	} catch (error) {
		return error
	}
}


/**
* Perform a macOS service.
* Available services could be seen in the index.
* @param {string} service the service to perform.
* @param {string=} argv service's arguments.
*/
LaunchBar.performService = async(service, argv) => {
	argv = escapeString(argv)
	await runApplescript(`tell application "LaunchBar" to perform service "${service}" with string "${argv}"`)
};

/**
* Displays a message in Notification Center.
* @param {string=} text - the message's body.
* @param {string=} title - the message's title. Defaults to "LaunchBar".
* @param {string=} subtitle - the message's subtitle.
* @param {string=} callbackUrl - URL opened if notificiation is clicked.
* @param {integer=} afterDelay - time in seconds after which the notification is shown.
*/
LaunchBar.displayNotification = async(text, title, subtitle, callbackUrl, afterDelay) => {
	text = (text) ? text : ""
	title = (title) ? title : "LaunchBar"
	subtitle = (subtitle) ? subtitle : ""
	callbackUrl = (callbackUrl) ? callbackUrl : ""
	afterDelay = (afterDelay) ? afterDelay : 0
	await runApplescript(`tell application "LaunchBar" to display in notification center "${text}" ¬
		with title "${title}" ¬
		subtitle "${subtitle}" ¬
		callback URL "${callbackUrl}" ¬
		after delay "${afterDelay.toString()}"`)
}

/**
* Caches an item in the respective action's cache directory.
*/
LaunchBar.cache = new CacheConf({
	configName: 'cache',
	cwd: LaunchBar.action.cachePath
});
